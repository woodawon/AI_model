프로그래머
인공지능
데이터
인공 신경망
컴파일
코드
언어
메소드
인스턴스
클래스
변수
배열
함수
메서드
객체
파라미터
파라메터
오브젝트
상속
부모
자식
코딩
명령
명령어
컴퓨터
프로그램
명령문
자바
파이썬
프론트엔드
백엔드
하드웨어
소프트웨어
웹
모바일
앱
게임
해킹
알고리즘
라이브러리
프레임워크
안드로이드
플러터
리액트
스프링
프로그래밍
컴파일러
기계어
자연어
이진
이진수
디버깅
버그
오류
개발자
엔지니어
기획
개발
디자인
웹페이지
서버
디바이스
클라우드
변수
환경 변수
상수
개발 환경
주석
연산자
비교
논리
리팩토링
정규식
정규표현식
객체 지향 프로그래밍
코딩의 바탕이 되는 컴퓨터에 대한 이해가 필요하겠죠. 
컴퓨터는 간단히 말해서 ‘기계를 모아둔 것’입니다. 
그 안에 있는 운영체제, 인터넷이 중요한 역할을 맡고 있습니다.
서버는 클라이언트의 요청에 따라 데이터를 저장하거나 보여주는 프로그램이에요. 
서버가 고장나면 인터넷을 사용할 수 없기 때문에 서버는 아주 중요합니다. 
티켓팅을 할 때 ‘서버가 터진’ 경험 있으시죠. 
서버에 사용자가 몰려서 웹페이지를 이용할 수 없게 된 것이랍니다.
프로그래밍 언어의 역할은 인간과 가장 가까운 언어로 OS에 명령을 내리는 것인데요. 
아무런 틀없이 프로그래밍 언어 하나만으로 서버를 처음부터 만드는 것은 힘들고 비효율적입니다. 
개발자들은 ‘프레임워크’를 사용하여 보다 수월하게 서버를 제작합니다. 
프레임워크는 레고 블록 조각이라고 생각하면 됩니다. 
미리 만들어둔 조각을 가지고 필요한 곳에 사용하는 것이죠.
프론트엔드는 자동차의 외관처럼 유저의 눈에 보이는 부분을 뜻합니다. 
프론트엔드는 HTML, CSS, JS라는 프로그래밍 언어를 사용합니다. 
그에 맞는 프레임워크는 JS로 만든 앵귤러, 뷰, 리액트가 있습니다. 
프론트엔드 프레임워크를 배우고 싶다면 가장 많이 쓰이는 리액트를 추천드려요. 
리액트를 익히고 나면 다른 프레임워크 쉽게 배울 수 있을 거예요.
백엔드는 자동차의 엔진같은 역할로, 프론트엔드가 제대로 돌아가게 만드는 부분입니다. 
서버 즉, 백엔드는 대부분의 프로그래밍 언어가 사용 가능합니다. 
그 중에서 어렵고 형식이 많지만 큰 회사에서 많이 쓰는 Java, 쉽게 입문하며 자유롭고 데이터 분석에도 쓰는 python, javascript와 유사해서 스타트업에서 많이 사용하는 node.js가 대표적이죠. 
각각 프로그래밍 언어에 대응하는 프레임워크는 Java에 쓰이는 Spring, Node.js에 쓰이는 Express, Python에 쓰이는 Django, Flask 입니다.
프로그래밍은 ‘수식이나 작업을 컴퓨터에 알맞도록 정리해서 순서를 정하고 컴퓨터 특유의 명령코드로 고쳐 쓰는 작업’을 총칭하는 말입니다. 
위에서 명령 코드를 입력하는 것이 코딩이라고 말씀 드렸는데요. 
간단히 정리하면, 프로그래밍은 코딩을 포괄하는 보다 큰 개념이고, 코딩은 컴퓨터 언어로 명령을 입력하는 작업 정도로 생각하시면 됩니다.
그래서 개발자들 사이에서는 단순 코더로 불리기보다는 스스로 논리를 갖춘 프로그래머로 성장하는 것을 원하는 사람들이 많다고 해요. 
코딩을 할 때 발생하는 문제를 해결하고, 논리적인 구조로 프로그램을 만드는 사람이야말로 진정한 개발자인 것이죠.
프로그램은 컴퓨터가 수행해야 할 작업을 명령어로 기록한 것입니다. 
일련의 명령어와 알고리즘을 사용하여 원하는 결과를 얻을 수 있도록 설계되어 있습니다. 
프로그램은 주로 프로그래밍 언어를 사용하여 작성되며, 컴파일러나 인터프리터를 통해 컴퓨터가 이해할 수 있는 형태로 변환됩니다.
프로그래밍 언어는 사람과 컴퓨터 사이의 의사소통을 위한 규칙과 구문의 집합입니다. 
일반적으로 고급 언어와 저급 언어로 구분됩니다. 
고급 언어는 사람이 이해하기 쉽고 추상화된 문법을 가지며, 저급 언어는 컴퓨터가 직접 실행하기에 가까운 낮은 수준의 언어입니다.
컴파일러는 프로그램을 고급 언어에서 기계어로 번역하여 실행 파일을 생성하는 도구입니다.
반면에 인터프리터는 프로그램을 한 줄씩 읽고 실행하는 도구로, 코드를 직접 실행합니다. 
컴파일러는 실행 파일을 생성하는 반면, 인터프리터는 코드를 실행하기만 합니다.
알고리즘은 문제를 해결하기 위한 일련의 단계나 절차입니다. 
프로그램은 이러한 알고리즘을 사용하여 원하는 결과를 도출합니다. 
효율적이고 정확한 알고리즘 설계는 좋은 소프트웨어 개발의 핵심 요소입니다.
소프트웨어는 데이터를 처리하고 저장하기도 합니다.
데이터는 프로그램이 작업하는 내용을 나타내며, 텍스트, 숫자, 이미지, 오디오 등 다양한 형태로 존재할 수 있습니다.
소프트웨어는 개발 단계를 거쳐 생성됩니다.
주요 단계로는 요구 분석, 설계, 개발, 테스트, 배포 및 유지보수 등이 있습니다.
이러한 단계는 효율적이고 안정적인 소프트웨어 제작을 위해 따라야 할 절차를 나타냅니다.
소프트웨어는 시스템 소프트웨어, 응용 소프트웨어, 웹 애플리케이션, 모바일 앱 등 다양한 형태로 분류될 수 있습니다.
시스템 소프트웨어는 컴퓨터 하드웨어를 관리하고 운영체제를 포함합니다.
응용 소프트웨어는 특정 작업을 수행하는 데 사용되며, 웹 애플리케이션과 모바일 앱은 인터넷이나 모바일 기기에서 동작하는 소프트웨어를 나타냅니다.
소프트웨어는 컴퓨터 시스템에서 동작하는 프로그램, 데이터 및 명령의 집합으로, 컴퓨터나 다른 디지털 장치를 작동하고 원하는 작업을 수행하도록 만들어지는 핵심적인 요소입니다.
인공지능은 인간의 지능적인 행동을 모방하거나 시뮬레이션하는 컴퓨터 시스템이나 소프트웨어를 의미합니다.
인공지능은 기계가 사고, 학습, 문제 해결 및 결정을 수행할 수 있는 능력을 가질 때 발생하는 개념입니다.
머신 러닝은 컴퓨터 시스템이 데이터를 분석하고 패턴을 학습하여 결정을 내릴 수 있도록 하는 기술입니다.
이를 위해 알고리즘과 모델을 사용하여 컴퓨터가 데이터에서 스스로 학습하고 개선하는 과정을 의미합니다.
머신 러닝은 지도 학습, 비지도 학습, 강화 학습 등 다양한 방식으로 이루어집니다.
딥 러닝은 머신 러닝의 한 분야로, 인공신경망을 사용하여 복잡한 데이터 패턴을 학습하는 기술입니다.
딥 러닝은 다층 구조의 신경망을 통해 다양한 특징과 계층적인 패턴을 자동으로 추출하고 이해할 수 있습니다.
이미지 및 음성 인식, 자연어 처리 등 다양한 영역에서 성공적으로 적용되고 있습니다.
강화 학습은 에이전트가 환경과 상호작용하며 보상을 최대화하는 방법을 학습하는 방식입니다.
에이전트는 시행착오를 통해 행동을 개선하고 최적의 정책(policy)을 찾아내는 과정을 거칩니다.
강화 학습은 게임, 로봇 제어, 자율 주행 등 다양한 분야에 활용됩니다.
인공 신경망은 생물학적 신경망에서 영감을 받은 모델로, 여러 개의 뉴런과 뉴런 간의 연결로 구성됩니다.
각 뉴런은 입력을 받아 가중치를 곱한 후 활성화 함수를 거치는 등의 계산을 수행하며, 신경망 전체가 복잡한 패턴을 학습하고 추론하는 역할을 합니다.
자연어 처리는 컴퓨터가 인간의 언어를 이해하고 생성하는 기술을 다루는 분야입니다.
기계 번역, 감정 분석, 질의 응답 시스템 등에 활용됩니다.
의사 결정 트리는 데이터를 분석하여 결정을 내릴 수 있는 나무 구조의 모델입니다.
데이터를 기반으로 다양한 조건을 분석하여 결과를 예측하거나 분류하는 데 사용됩니다.
클러스터링은 유사한 특성을 가진 데이터를 그룹으로 묶는 기술로, 비지도 학습의 한 예입니다.
데이터의 패턴이나 관계를 파악하는 데 사용됩니다.
인공지능 개발은 윤리적 고려와 안전성을 고려해야 합니다.
AI 시스템이 편향성을 가지거나 예측할 수 없는 결과를 도출하는 상황을 방지하기 위한 연구와 노력이 진행 중입니다.
반복문은 특정한 동작을 여러 번 반복해서 수행하는 구조입니다.
for문, while문 등이 사용되며, 데이터의 집합이나 조건을 기반으로 반복 작업을 수행할 때 유용합니다.
함수는 재사용 가능한 코드 블록으로, 특정한 작업을 수행하는 코드를 하나로 묶어 놓은 것입니다.
함수를 사용하면 코드의 가독성과 유지보수성을 높일 수 있습니다.
앱 개발은 주로 iOS와 Android 플랫폼을 대상으로 진행됩니다.
각 플랫폼은 다른 프로그래밍 언어와 도구를 사용하며, 개발 환경도 다르기 때문에 개발자는 어느 플랫폼을 대상으로 할지 결정해야 합니다.
네이티브 앱은 각 플랫폼의 고유한 언어와 도구를 사용하여 개발되며, 각 플랫폼의 기능과 성능을 최대한 활용할 수 있습니다.
예를 들어, iOS용 앱은 Swift나 Objective-C를 사용하고, Android용 앱은 Java나 Kotlin을 사용합니다.
크로스 플랫폼 앱은 하나의 코드베이스를 사용하여 여러 플랫폼에서 실행되는 앱을 개발하는 방식입니다.
대표적인 크로스 플랫폼 프레임워크로는 React Native, Flutter, Xamarin 등이 있습니다.
앱의 사용자 경험을 향상시키기 위해 사용자 인터페이스 및 사용자 경험 디자인이 중요합니다.
앱의 디자인은 사용자가 쉽게 사용하고 직관적으로 동작하는지 확인하는 단계입니다.
앱을 개발할 때는 프로그래밍 언어와 도구를 사용하여 기능을 구현합니다.
이후에는 앱을 테스트하여 버그를 찾고 해결합니다.
테스트 과정은 앱의 안정성과 성능을 보장하기 위해 중요합니다.
개발이 완료되면 앱을 해당 플랫폼의 앱 스토어에 제출합니다. 
해당 스토어에서 검토를 거쳐 승인이 되면 사용자들이 앱을 다운로드하고 설치할 수 있게 됩니다.
앱이 출시된 후에도 지속적으로 유지보수와 업데이트 작업이 필요합니다. 
새로운 기능 추가, 버그 수정, 보안 업데이트 등을 통해 앱의 성능과 기능을 개선하고 사용자 경험을 향상시킵니다.
앱 개발은 휴대용 디바이스에서 다양한 기능과 서비스를 제공하는 데 사용되며, 사용자와 상호작용하는 모바일 환경에서 앱의 품질과 사용자 경험을 중요하게 고려하는 과정입니다.